sent <- get_sentiments("affin")
sent <- get_sentiments("afinn")
words_sp <-copy_to(sc,words)
words <-copy_to(sc,words)
View(words)
words<- hits %>%
select(Artist,Year,Lyrics) %>%
ft_tokenizer("Artist","word") %>%
collect() %>%
mutate(word=lapply(word,as.character)) %>%
unnest(word)
View(words)
sentimental_artists <- words %>%
# Inner join with sentiments on word field
inner_join(sent,by="word") %>%
# Group by artist
group_by(Artist) %>%
# Summarize to get positivity
summarize(positivity=sum(score))
View(sentimental_artists)
View(sentimental_artists)
View(sent)
sentimental_artists %>%
# Arrange by ascending positivity
arrange(positivity) %>%
# Get top 5
top_n(5)
sentimental_artists %>%
# Arrange by descending positivity
arrange(desc(positivity)) %>%
# Get top 5
top_n(5)
words<- hits %>%
select(Artist,Year,Lyrics) %>%
ft_tokenizer("Lyrics","word") %>%
collect() %>%
mutate(word=lapply(word,as.character)) %>%
unnest(word)
words<- hits %>%
select(Artist,Year,Lyrics) %>% na.omit() %>%
ft_tokenizer("Lyrics","word") %>%
collect() %>%
mutate(word=lapply(word,as.character)) %>%
unnest(word)
words<- hits %>%
select(Artist,Year,Lyrics) %>% na.omit() %>%
ft_tokenizer("Artist","word") %>%
collect() %>%
mutate(word=lapply(word,as.character)) %>%
unnest(word)
words<- hits %>%
select(Artist,Year,Lyrics) %>% na.omit()
words_2 <- words %>%
ft_tokenizer("Artist","word") %>%
collect() %>%
mutate(word=lapply(word,as.character)) %>%
unnest(word)
# define parameters
players <- 10
interactions<-250
# make intial distribution
dat <- matrix(rep(interactions,players),nrow = players)
# assign dice "multipliers"
dice <-c(-0.8,-0.4,-0.2,0.2,0.4,0.8)
# define game function
diceGame <- function(x) {
beg <- sum(x) # total in beginning
int <- x*(1+sample(dice,players,replace = TRUE)) # draw outcomes
newTot <- sum(int) # sum of new balance
fac <- (newTot-beg)/newTot # calculate factor
duty <- int-(fac*int) # apply to keep total wealth constant
return(duty) # return new distribution to players
}
# create holder of results
holder <- matrix(ncol=interactions,nrow=players)
# iterate through main loop
i=1
for (i in i:ncol(holder)) {
results<-apply(dat, MARGIN = 2,FUN = diceGame) # iterate draws down columns
holder[,i] <-results # pass results to holder
dat<-results # reassign latest outcome to balance sheet
}
View(holder)
library(ggplot2)
a <- matrix(rnorm(200), 20, 10)
qplot(c(row(a)), c(a), group = c(col(a)), colour = c(col(a)), geom = "line")
library(ggplot2)
a <- matrix(rnorm(200), 20, 10)
qplot(c(row(holder)), c(holder), group = c(col(holder)), colour = c(col(holder)), geom = "line")
library(ggplot2)
a <- matrix(rnorm(200), 20, 10)
qplot(c(col(holder)), c(holder), group = c(row(holder)), colour = c(col(holder)), geom = "line")
library(ggplot2)
a <- matrix(rnorm(200), 20, 10)
qplot(c(col(holder)), c(holder), group = c(row(holder)), colour = c(row(holder)), geom = "line")
library(ggplot2)
a <- matrix(rnorm(200), 20, 10)
qplot(c(col(holder)), c(holder), group = c(row(holder)), colour = as.factor(c(row(holder))), geom = "line")
library(ggplot2)
qplot(c(col(holder)), c(holder), group = c(row(holder)), colour = as.factor(c(row(holder))), geom = "line") +
xlab("Iterations") +ylab("Total Wealth")
install.packages("bench")
devtools::install_github("apache/arrow", subdir = "r", ref = "apache-arrow-0.12.0")
install.packages("devtools")
devtools::install_github("apache/arrow", subdir = "r", ref = "apache-arrow-0.12.0")
devtools::install_github("apache/arrow", subdir = "r", ref = "apache-arrow-0.12.0")
devtools::install_github("apache/arrow", subdir = "r", ref = "apache-arrow-0.12.0")
install.packages("remotes")
remotes::install_github("apache/arrow", subdir = "r", ref = "apache-arrow-0.12.0")
devtools::install_github("apache/arrow", subdir = "r", ref = "apache-arrow-0.12.0")
install.packages("mongolite")
library(mongolite)
m <- mongo("mtcars", url = "mongodb://readwrite:test@mongo.opencpu.org:43942/jeroen_test")
print(m)
dmd <- mongo("diamonds")
connection <- mongo(collection = "scores", db = "newdb", url = "mongodb://localhost")
connection <- mongo()
connection <- mongo()
dmd <- mongo("diamonds")
dmd
dmd$insert(ggplot2::diamonds)
dmd$count()
dmd$count('{}')
alldata <- dmd$find('{}')
View(alldata)
premium_diamonds <-dmd$find('{cut : "Ideal", "price" : {$lt : 250} }')
premium_diamonds <-dmd$find('{"cut" : "Ideal", "price" : {$lt : 250} }')
premium_diamonds <-dmd$find('{"cut" : "Ideal", "price" : {"$lt" : 250} }')
premium_diamonds <-dmd$find('{"cut" : "Ideal", "price" : {"$lt" : 550} }')
View(premium_diamonds)
filtered_results <- dmd$find('{"cut" : "Premium"}, "price" : {"$gt : 350"}',)
filtered_results <- dmd$find('{"cut" : "Premium"}, "price" : {"$gt" : 350"}', fields = '{"cut" : true, "color" : true, "clarity" : true}')
filtered_results <- dmd$find('{"cut" : "Premium"}, "price" : {"$gt" : 350}', fields = '{"cut" : true, "color" : true, "clarity" : true}')
filtered_results <- dmd$find('{"cut" : "Premium"}, "price" : {"$gt" : 350}}', fields = '{"cut" : true, "color" : true, "clarity" : true}')
premium_diamonds <-dmd$find('{"cut" : "Ideal", "price" : {"$gt" : 550} }')
premium_diamonds <-dmd$find('{"cut" : "Ideal", "price" : {"$lt" : 550} }')
filtered_fields <-dmd$find('{"cut" : "Premium", "price" : {"$gt" : 350} }',
fields = '{"cut" : true, "clarity" : true}')
View(filtered_fields)
best_fair <- dmd$find('{"cut" : "Ideal"}', sort = '{"price: -1}', limit = 10)
best_fair <- dmd$find('{"cut" : "Ideal"}', sort = '{"price": -1}', limit = 10)
View(best_fair)
system.time(dmd$find('{"cut": "Ideal}',sort='{"price" :-1 },limit=10'))
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1 },limit=10'))
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1}',limit=10))
dmd$index(add = '{"price" : -1}')
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1}',limit=10))
dmd$index(add = '{"cut" : -1}')
dmd$index(add = '{"cut" : -1, "price": -1}')
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1}',limit=10))
dmd$index(remove='cut_-1_price_-1')
dmd$index(remove='cut_-1')
dmd$index(remove='price_-1')
system.time(dmd$find(sort='{"price" :-1}',limit=100))
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1}',limit=1000))
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1}',limit=1000))
dmd$index(add = '{"cut" : -1}')
dmd$index(add = '{"price" : -1}')
system.time(dmd$find('{"cut": "Ideal"}',sort='{"price" :-1}',limit=1000))
savehistory("C:/Users/daniel/Desktop/locstore/projects/mongodb/mongoR.R")
library(mongolite)
library(tidyverse)
library(DBI)
# create new collection in MongoDB
con_mongo <- mongo("data-explorationsDB")
# connect to Postgre database
con_postgre <- dbConnect(RPostgres::Postgres(),dbname="imports",
port=5432,user="postgres",password="monica")
# create new collection in MongoDB
con_mongo <- mongo("data-explorationsDB")
# connect to Postgre database
con_postgre <- dbConnect(RPostgres::Postgres(),dbname="imports",
port=5432,user="USER",password="PASSWORD")
# create new collection in MongoDB
con_mongo <- mongo("data-explorationsDB")
# connect to Postgre database
con_postgre <- dbConnect(RPostgres::Postgres(),dbname="imports",
port=5432,user="USER",password="PASSWORD")
# import bson file into MongoDB
setwd("C:/Users/daniel/Desktop/locstore/projects/mongodb/")
con_mongo$import(file("flights-dump.bson"),bson=TRUE)
# list all tables available in Postgre database
dbListTables(con_postgre)
# inspecting the collection contents
mongo_head <- con_mongo$find('{}',limit=5)
mongo_head
# inspecting using postgreSQL syntax
postgre_head <- dbSendQuery(con_postgre, "SELECT *
FROM flights LIMIT 5;")
dbFetch(postgre_head)
dbClearResult(postgre_head)
# retrieving a basic 'subset' using mongo
mongo_sub <- con_mongo$find('{"carrier" : "UA", "month" : 1, "day" : 1, "origin" : "JFK"}')
mongo_sub
# retrieving a subset using postrgre
postgre_sub <- dbSendQuery(con_postgre, "SELECT *
FROM FLIGHTS
WHERE  CARRIER = 'UA' AND
MONTH_ = 1 AND
DAY_ = 1 AND
ORIGIN = 'JFK';")
library(microbenchmark)
mbm_reg <- microbenchmark("regular" = {
con$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
library(microbenchmark)
mbm_reg <- microbenchmark("regular" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
con$index(add = '{"dep_delay" : -1}')
con_mongo$index(add = '{"dep_delay" : -1}')
mbm_ind <- microbenchmark("index" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
results<-rbind(mbm_ind,mbm_reg)
autoplot(results)
# CREATE INDEX salary_index ON COMPANY (salary);
postgre_index <- dbSendQuery(con_postgre,"CREATE INDEX
dep_index ON flights (dep_delay)
")
# CREATE INDEX salary_index ON COMPANY (salary);
postgre_index <- dbSendQuery(con_postgre,"CREATE INDEX
dep_index ON flights (dep_delay)
")
postgre_indexs <- dbSendQuery(con_postgre,"d \flight
")
postgre_indexs <- dbSendQuery(con_postgre,"\d flight
postgre_index_find <- dbSendQuery(con_postgre, " SELECT *
FROM flights
ORDER BY dep_delay
")
dbFetch(postgre_index_find)
postgre_drop_index <- dbSendQuery(con_postgre,"DROP INDEX
dep_index
")
# CREATE INDEX salary_index ON COMPANY (salary);
postgre_index <- dbSendQuery(con_postgre,"CREATE INDEX
dep_index ON flights (dep_delay)
")
pos_ind <- microbenchmark("index" = {
postgre_index_find <- dbSendQuery(con_postgre, " SELECT *
FROM flights
ORDER BY dep_delay
LIMIT 50000
")
dbFetch(postgre_index_find)
},
times=10
)
postgre_drop_index <- dbSendQuery(con_postgre,"DROP INDEX
dep_index
")
View(pos_ind)
pos_no_ind <- microbenchmark("no_index" = {
postgre_no_index_find <- dbSendQuery(con_postgre, " SELECT *
FROM flights
ORDER BY dep_delay
LIMIT 50000
")
dbFetch(postgre_index_find)
},
times=10
)
pos_no_ind <- microbenchmark("no_index" = {
postgre_no_index_find <- dbSendQuery(con_postgre, " SELECT *
FROM flights
ORDER BY dep_delay
LIMIT 50000
")
dbFetch(postgre_no_index_find)
},
times=10
)
results_indexing<-rbind(pos_ind,pos_no_ind)
autoplot_indexing(results)
results_indexing<-rbind(pos_ind,pos_no_ind)
autoplot(results_indexing)
library(microbenchmark)
mon_no_ind <- microbenchmark("Mongo_No_Index" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
library(microbenchmark)
mon_no_ind <- microbenchmark("Mongo_No_Index" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
con_mongo$index(add = '{"dep_delay" : -1}')
mon_ind <- microbenchmark("Mongo_Index" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
# remove indexing on field
con_mongo$index(remove = "dep_delay_-1")
results<-rbind(mon_ind,mon_no_ind)
autoplot(results)
con_mongo$index(remove = "dep_delay_-1")
library(microbenchmark)
mon_no_ind <- microbenchmark("Mongo_No_Index" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
con_mongo$index(add = '{"dep_delay" : -1}')
mon_ind <- microbenchmark("Mongo_Index" = {
con_mongo$find('{}', sort = '{"dep_delay" : -1 }',
limit=50000)
},
times=10
)
# remove indexing on field
con_mongo$index(remove = "dep_delay_-1")
mon_results<-rbind(mon_ind,mon_no_ind)
autoplot(mon_results)
# querying without an index
pos_no_ind <- microbenchmark("Postgre_No_Index" = {
postgre_no_index_find <- dbSendQuery(con_postgre, " SELECT *
FROM flights
ORDER BY dep_delay
LIMIT 50000
")
dbFetch(postgre_no_index_find)
},
times=10
)
# querying with an index
postgre_index <- dbSendQuery(con_postgre,"CREATE INDEX
dep_index ON flights (dep_delay)
")
pos_ind <- microbenchmark("Postgre_Index" = {
postgre_index_find <- dbSendQuery(con_postgre, " SELECT *
FROM flights
ORDER BY dep_delay
LIMIT 50000
")
dbFetch(postgre_index_find)
},
times=10
)
# drop the index created
postgre_drop_index <- dbSendQuery(con_postgre,"DROP INDEX
dep_index
")
pos_results<-rbind(pos_ind,pos_no_ind)
autoplot(pos_results)
con_mongo$drop()
con_mongo$count()
con_mongo$info()
combn(c("r","p"),2)
combn(c("r","p"))
let <- c("r","p")
combn(let,2)
combn(let)
combn(let,1)
let <- c("r","p",-)
combn(length(let),2)
let <- dataframe("r","p","t")
let <- data.frame("r","p","t")
View(let)
combn(ncol(let),2)
colnames(compos.combin)<-lapply(combn(compos.conc$depth,2,simplify=FALSE),
function(x) paste(x,collapse="-"))
start<-combn(ncol(let),2)
colnames(start)<-lapply(combn(let,2,simplify=FALSE),
function(x) paste(x,collapse="-"))
View(start)
x<-c(r,p)
x<-c("r","p")
y<-c("r","p")
expand.grid(x,y)
y<-c("r","p","c")
x<-c("r","p","c")
expand.grid(x,y)
a<-expand.grid(x,y)
expand.grid(a$x,a$y)
View(a)
expand.grid(a$Var1,a$Var2)
View(a)
View(let)
View(a)
View(a)
View(a)
View(a)
a<- data.frame(c(1,3,4,5,6,1,6))
a
a<- data.frame(1,3,4,5,6,1,6)
a
a<- data.frame(c(1,3,4,5,6,1,6))
a
a<- c(1,3,4,5,6,1,6))
a<- c(1,3,4,5,6,1,6)
b<-as.data.frame(a)
b
labs<-c(1,3,4,5,6)
lapply(labs,2, function(x) sum(b$a==x))
lapply(labs,2, function(x) sum(b$a==x))
lapply(labs, function(x) sum(b$a==x))
lapply(labs, function(x) sum(b$a==x),simplify=TRUE)
unlist(lapply(labs, function(x) sum(b$a==x)))
cbind(b,unlist(lapply(labs, function(x) res= sum(b$a==x))))
cbind(a,unlist(lapply(labs, function(x) res= sum(b$a==x))))
cbind(labs,unlist(lapply(labs, function(x) res= sum(b$a==x))))
View(b)
table(b$a)
xx<-table(b$a)
xx<-as.data.frame(table(b$a))
View(xx)
rw <- c(1,5,3,2,7,5,2,2,3,4)
rw <- as.data.frame(rw)
View(rw)
la <- unique(rw)
View(la)
la <- as.vector(unique(rw))
rw <- c(1,5,3,2,7,5,2,2,3,4)
rw1 <- as.data.frame(rw)
la <- unique(rw)
cbind(labs,unlist(lapply(la, function(x) sum(rw1$rw == x))))
la <- unique(rw)
cbind(la,unlist(lapply(la, function(x) sum(rw1$rw == x))))
library(tidyverse)
setwd("C:/Users/daniel/Desktop/locstore/projects/porkBelly/investigations/food_tracker")
basics <- read_delim("foodTracker2018.tsv", "\t",
escape_double = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y")),
trim_ws = TRUE)
# compute distinct combinations per visit
grps <-basics %>% group_by(Date) %>%
distinct_at(.,vars(Item)) %>%
do(data.frame((t(combn(.$Item,2)))))
View(grps)
View(basics)
# get counts of unique combinations
cnts_pairs <- grps %>% group_by(X1,X2) %>%
summarise(counts=n())
View(cnts_pairs)
# filter by most occurences with manual threshold
cnts_ind_reps <- grps %>% group_by(X1) %>%
summarise(counts_inds = n()) %>%
filter(counts_inds>=4)
View(cnts_ind_reps)
# filter by quantile accouning for 50% of data
cnts_ind_quant <- grps %>% group_by(X1) %>%
summarise(counts_inds = n()) %>%
filter(counts_inds > quantile(counts_inds,0.50))
# join for different approaches
join_reps <- left_join(cnts_ind_reps,cnts_pairs)
join_quant <- left_join(cnts_ind_quant,cnts_pairs)
View(join_quant)
library(igraph)
food <- join_quant %>%
select(X1,X2)
View(food)
food.mat <- as.matrix(food)
# an edge attribute
edge.att <- join_quant %>%
select(counts) %>% as.matrix()
View(edge.att)
# building an igraph object from an edgelist
g <- graph.edgelist(food.mat,directed=FALSE)
plot(g)
gsize(g)
gorder(g)
# setting edge properties
g <- set_edge_attr(g, "baskets", value = edge.att)
View(edge.att)
E(g)[[baskets>=4]]
View(basics)
E(g)[[inc("Tomaten")]]
E(g)[[inc("Papaya")]]
# items bought frequently together
count(unique(basics$Date))
# items bought frequently together
unique(basics$Date)
# items bought frequently together
length(unique(basics$Date))
## building a graph from a dataframe
## uses edges and vertices
cnts_ind <- grps %>% group_by(X1) %>%
summarise(counts_inds = n())
View(cnts_ind)
# create food vertices
food_vertices <- basics %>% group_by(Item,Category) %>%
summarise(avg_price=round(mean(Price),1)) %>%
rename(food_type=Category)
View(food_vertices)
# create food edges
food_edges <- left_join(cnts_ind,cnts_pairs) %>%
select(X1,X2,counts)
View(food_edges)
View(food_edges)
View(cnts_ind)
View(cnts_pairs)
View(cnts_ind)
View(cnts_pairs)
View(cnts_ind)
View(grps)
